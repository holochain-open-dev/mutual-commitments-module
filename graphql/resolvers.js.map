{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/graphql/resolvers.ts"],"names":[],"mappings":"AAGA,MAAM,UAAU,0BAA0B,CACxC,YAA0B,EAC1B,MAAc,EACd,QAAQ,GAAG,oBAAoB;IAE/B,SAAS,QAAQ,CAAC,MAAc,EAAE,OAAY;QAC5C,OAAO,YAAY,CAAC,QAAQ,CAAC;YAC3B,GAAG,EAAE,IAAW;YAChB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,QAAQ;YACnB,OAAO,EAAE,MAAM;YACf,OAAO;YACP,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,qBAAqB,EAAE;YACrB,KAAK,CAAC,aAAa,CAAC,KAAK;gBACvB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,wBAAwB,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;gBAClE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACxD,CAAC;YACD,KAAK,CAAC,eAAe,CAAC,KAAK;gBACzB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,0BAA0B,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACxD,CAAC;SACF;QACD,KAAK,EAAE;YACL,KAAK,CAAC,wBAAwB,CAAC,KAAK;gBAClC,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,uBAAuB,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;gBAElE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC;oBAClC,EAAE,EAAE,KAAK;iBACV,CAAC,CAAC,CAAC;YACN,CAAC;YACD,KAAK,CAAC,WAAW,CAAC,KAAK;gBACrB,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,uBAAuB,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;gBAElE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC;oBAClC,EAAE,EAAE,KAAK;iBACV,CAAC,CAAC,CAAC;YACN,CAAC;SACF;QACD,QAAQ,EAAE;YACR,KAAK,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE;gBAC5C,MAAM,QAAQ,CAAC,yBAAyB,EAAE;oBACxC,UAAU,EAAE,OAAO;oBACnB,gBAAgB,EAAE,SAAS;iBAC5B,CAAC,CAAC;gBAEH,OAAO,IAAI,CAAC;YACd,CAAC;YACD,KAAK,CAAC,yBAAyB,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE;gBAC5C,MAAM,QAAQ,CAAC,8BAA8B,EAAE,OAAO,CAAC,CAAC;gBAExD,OAAO,IAAI,CAAC;YACd,CAAC;YACD,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE;gBACpC,MAAM,QAAQ,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;gBAE9C,OAAO,IAAI,CAAC;YACd,CAAC;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { Resolvers } from '@apollo/client/core';\nimport { AppWebsocket, CellId } from '@holochain/conductor-api';\n\nexport function mutualCommitmentsResolvers(\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  zomeName = 'mutual_commitments'\n): Resolvers {\n  function callZome(fnName: string, payload: any) {\n    return appWebsocket.callZome({\n      cap: null as any,\n      cell_id: cellId,\n      zome_name: zomeName,\n      fn_name: fnName,\n      payload,\n      provenance: cellId[1],\n    });\n  }\n\n  return {\n    MutualCommitmentEntry: {\n      async invitedAgents(entry) {\n        const agents = await callZome('get_invited_agents_for', entry.id);\n        return agents.map((agent: string) => ({ id: agent }));\n      },\n      async committedAgents(entry) {\n        const agents = await callZome('get_committed_agents_for', entry.id);\n        return agents.map((agent: string) => ({ id: agent }));\n      },\n    },\n    Agent: {\n      async pendingCommitmentInvites(agent) {\n        const entries = await callZome('get_agent_invitations', agent.id);\n\n        return entries.map((entry: any) => ({\n          id: entry,\n        }));\n      },\n      async committedTo(agent) {\n        const entries = await callZome('get_agent_commitments', agent.id);\n\n        return entries.map((entry: any) => ({\n          id: entry,\n        }));\n      },\n    },\n    Mutation: {\n      async inviteToCommit(_, { entryId, agentsIds }) {\n        await callZome('invite_agents_to_commit', {\n          entry_hash: entryId,\n          agents_to_invite: agentsIds,\n        });\n\n        return true;\n      },\n      async acceptInvitationAndCommit(_, { entryId }) {\n        await callZome('accept_invitation_and_commit', entryId);\n\n        return true;\n      },\n      async declineInvitation(_, { entryId }) {\n        await callZome('decline_invitation', entryId);\n\n        return true;\n      },\n    },\n  };\n}\n"]}