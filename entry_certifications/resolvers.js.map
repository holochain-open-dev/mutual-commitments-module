{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/entry_certifications/resolvers.ts"],"names":[],"mappings":"AAGA,MAAM,UAAU,4BAA4B,CAC1C,YAA0B,EAC1B,MAAc,EACd,QAAQ,GAAG,sBAAsB;IAEjC,SAAS,QAAQ,CAAC,MAAc,EAAE,OAAY;QAC5C,OAAO,YAAY,CAAC,QAAQ,CAAC;YAC3B,GAAG,EAAE,IAAW;YAChB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,QAAQ;YACnB,OAAO,EAAE,MAAM;YACf,OAAO;YACP,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,iBAAiB,EAAE;YACjB,KAAK,CAAC,cAAc,CAAC,KAAK;gBACxB,MAAM,cAAc,GAAG,MAAM,QAAQ,CACnC,wBAAwB,EACxB,KAAK,CAAC,EAAE,CACT,CAAC;gBACF,OAAO,cAAc,CAAC,GAAG,CACvB,CAAC,CAAC,eAAe,EAAE,aAAa,CAAgB,EAAE,EAAE,CAAC,CAAC;oBACpD,EAAE,EAAE,eAAe;oBACnB,GAAG,aAAa;iBACjB,CAAC,CACH,CAAC;YACJ,CAAC;SACF;QACD,KAAK,EAAE;YACL,KAAK,CAAC,qBAAqB,CAAC,KAAK;gBAC/B,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,uBAAuB,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;gBAElE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC;oBAClC,EAAE,EAAE,KAAK;iBACV,CAAC,CAAC,CAAC;YACN,CAAC;SACF;QACD,QAAQ,EAAE;YACR,KAAK,CAAC,uBAAuB,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;gBAC5D,MAAM,QAAQ,CAAC,2BAA2B,EAAE;oBAC1C,UAAU,EAAE,OAAO;oBACnB,sBAAsB,EAAE,gBAAgB;iBACzC,CAAC,CAAC;gBAEH,OAAO,IAAI,CAAC;YACd,CAAC;YACD,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAAE,EAAE,eAAe,EAAE;gBAC5C,MAAM,QAAQ,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC;gBAEtD,OAAO,IAAI,CAAC;YACd,CAAC;YACD,KAAK,CAAC,mBAAmB,CAAC,CAAC,EAAE,EAAE,eAAe,EAAE;gBAC9C,MAAM,QAAQ,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;gBAErD,OAAO,IAAI,CAAC;YACd,CAAC;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { Resolvers } from '@apollo/client/core';\nimport { AppWebsocket, CellId } from '@holochain/conductor-api';\n\nexport function entryCertificationsResolvers(\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  zomeName = 'entry_certifications'\n): Resolvers {\n  function callZome(fnName: string, payload: any) {\n    return appWebsocket.callZome({\n      cap: null as any,\n      cell_id: cellId,\n      zome_name: zomeName,\n      fn_name: fnName,\n      payload,\n      provenance: cellId[1],\n    });\n  }\n\n  return {\n    CertificatedEntry: {\n      async certifications(entry) {\n        const certifications = await callZome(\n          'get_certifications_for',\n          entry.id\n        );\n        return certifications.map(\n          ([certificationId, certification]: [string, any]) => ({\n            id: certificationId,\n            ...certification,\n          })\n        );\n      },\n    },\n    Agent: {\n      async pendingCertifications(agent) {\n        const entries = await callZome('get_agent_invitations', agent.id);\n\n        return entries.map((entry: any) => ({\n          id: entry,\n        }));\n      },\n    },\n    Mutation: {\n      async requestForCertification(_, { entryId, certificatorsIds }) {\n        await callZome('request_for_certification', {\n          entry_hash: entryId,\n          certificators_pub_keys: certificatorsIds,\n        });\n\n        return true;\n      },\n      async certifyInitiative(_, { certificationId }) {\n        await callZome('certify_initiative', certificationId);\n\n        return true;\n      },\n      async rejectCertification(_, { certificationId }) {\n        await callZome('reject_initiative', certificationId);\n\n        return true;\n      },\n    },\n  };\n}\n"]}